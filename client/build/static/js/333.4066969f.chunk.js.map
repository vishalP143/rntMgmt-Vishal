{"version":3,"file":"static/js/333.4066969f.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Download.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","../node_modules/qrcode.react/lib/esm/index.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5zM19 9h-4V3H9v6H5l7 7z\"\n}), 'Download');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Paper from \"../Paper/index.js\";\nimport { getCardUtilityClass } from \"./cardClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  overflow: 'hidden'\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n    className,\n    raised = false,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    raised\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, {\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getCardContentUtilityClass } from \"./cardContentClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: 16,\n  '&:last-child': {\n    paddingBottom: 24\n  }\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n    className,\n    component = 'div',\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    component\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class _QrCode {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    /*-- Static factory functions (high level) --*/\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    // Modified to expose modules for easy access\n    getModules() {\n      return this.modules;\n    }\n    /*-- Private helper methods for constructor: Drawing function modules --*/\n    // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    /*-- Private helper methods for constructor: Codewords and masking --*/\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    /*-- Private helper functions --*/\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  _QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  _QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  _QrCode.PENALTY_N1 = 3;\n  _QrCode.PENALTY_N2 = 3;\n  _QrCode.PENALTY_N3 = 40;\n  _QrCode.PENALTY_N4 = 10;\n  _QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Low\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    // Medium\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Quartile\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n    // High\n  ];\n  _QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    // Low\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    // Medium\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    // Quartile\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n    // High\n  ];\n  let QrCode = _QrCode;\n  qrcodegen2.QrCode = _QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class _QrSegment {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    getData() {\n      return this.bitData.slice();\n    }\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substring(i + 1, i + 3), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  _QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  _QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  _QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  let QrSegment = _QrSegment;\n  qrcodegen2.QrSegment = _QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class _Ecc {\n      // The QR Code can tolerate about 30% erroneous codewords\n      /*-- Constructor and fields --*/\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    /*-- Constants --*/\n    _Ecc.LOW = new _Ecc(0, 1);\n    // The QR Code can tolerate about  7% erroneous codewords\n    _Ecc.MEDIUM = new _Ecc(1, 0);\n    // The QR Code can tolerate about 15% erroneous codewords\n    _Ecc.QUARTILE = new _Ecc(2, 3);\n    // The QR Code can tolerate about 25% erroneous codewords\n    _Ecc.HIGH = new _Ecc(3, 2);\n    let Ecc = _Ecc;\n    QrCode2.Ecc = _Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class _Mode {\n      /*-- Constructor and fields --*/\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    /*-- Constants --*/\n    _Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    _Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    _Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    _Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    _Mode.ECI = new _Mode(7, [0, 0, 0]);\n    let Mode = _Mode;\n    QrSegment2.Mode = _Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar DEFAULT_MINVERSION = 1;\nvar SPEC_MARGIN_SIZE = 4;\nvar DEFAULT_MARGIN_SIZE = 0;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(\n          `M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`\n        );\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(\n            `M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`\n          );\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, margin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  const opacity = imageSettings.opacity == null ? 1 : imageSettings.opacity;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  const crossOrigin = imageSettings.crossOrigin;\n  return { x, y, h, w, excavation, opacity, crossOrigin };\n}\nfunction getMarginSize(includeMargin, marginSize) {\n  if (marginSize != null) {\n    return Math.max(Math.floor(marginSize), 0);\n  }\n  return includeMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE;\n}\nfunction useQRCode({\n  value,\n  level,\n  minVersion,\n  includeMargin,\n  marginSize,\n  imageSettings,\n  size,\n  boostLevel\n}) {\n  let qrcode = React.useMemo(() => {\n    const values = Array.isArray(value) ? value : [value];\n    const segments = values.reduce((accum, v) => {\n      accum.push(...qrcodegen_default.QrSegment.makeSegments(v));\n      return accum;\n    }, []);\n    return qrcodegen_default.QrCode.encodeSegments(\n      segments,\n      ERROR_LEVEL_MAP[level],\n      minVersion,\n      void 0,\n      void 0,\n      boostLevel\n    );\n  }, [value, level, minVersion, boostLevel]);\n  const { cells, margin, numCells, calculatedImageSettings } = React.useMemo(() => {\n    let cells2 = qrcode.getModules();\n    const margin2 = getMarginSize(includeMargin, marginSize);\n    const numCells2 = cells2.length + margin2 * 2;\n    const calculatedImageSettings2 = getImageSettings(\n      cells2,\n      size,\n      margin2,\n      imageSettings\n    );\n    return {\n      cells: cells2,\n      margin: margin2,\n      numCells: numCells2,\n      calculatedImageSettings: calculatedImageSettings2\n    };\n  }, [qrcode, size, imageSettings, includeMargin, marginSize]);\n  return {\n    qrcode,\n    margin,\n    cells,\n    numCells,\n    calculatedImageSettings\n  };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nvar QRCodeCanvas = React.forwardRef(\n  function QRCodeCanvas2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      boostLevel,\n      marginSize,\n      imageSettings\n    } = _a, extraProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"boostLevel\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const _b = extraProps, { style } = _b, otherProps = __objRest(_b, [\"style\"]);\n    const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n    const _canvas = React.useRef(null);\n    const _image = React.useRef(null);\n    const setCanvasRef = React.useCallback(\n      (node) => {\n        _canvas.current = node;\n        if (typeof forwardedRef === \"function\") {\n          forwardedRef(node);\n        } else if (forwardedRef) {\n          forwardedRef.current = node;\n        }\n      },\n      [forwardedRef]\n    );\n    const [isImgLoaded, setIsImageLoaded] = React.useState(false);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      boostLevel,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    React.useEffect(() => {\n      if (_canvas.current != null) {\n        const canvas = _canvas.current;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n          return;\n        }\n        let cellsToDraw = cells;\n        const image = _image.current;\n        const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n        if (haveImageToRender) {\n          if (calculatedImageSettings.excavation != null) {\n            cellsToDraw = excavateModules(\n              cells,\n              calculatedImageSettings.excavation\n            );\n          }\n        }\n        const pixelRatio = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = size * pixelRatio;\n        const scale = size / numCells * pixelRatio;\n        ctx.scale(scale, scale);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, numCells, numCells);\n        ctx.fillStyle = fgColor;\n        if (SUPPORTS_PATH2D) {\n          ctx.fill(new Path2D(generatePath(cellsToDraw, margin)));\n        } else {\n          cells.forEach(function(row, rdx) {\n            row.forEach(function(cell, cdx) {\n              if (cell) {\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n              }\n            });\n          });\n        }\n        if (calculatedImageSettings) {\n          ctx.globalAlpha = calculatedImageSettings.opacity;\n        }\n        if (haveImageToRender) {\n          ctx.drawImage(\n            image,\n            calculatedImageSettings.x + margin,\n            calculatedImageSettings.y + margin,\n            calculatedImageSettings.w,\n            calculatedImageSettings.h\n          );\n        }\n      }\n    });\n    React.useEffect(() => {\n      setIsImageLoaded(false);\n    }, [imgSrc]);\n    const canvasStyle = __spreadValues({ height: size, width: size }, style);\n    let img = null;\n    if (imgSrc != null) {\n      img = /* @__PURE__ */ React.createElement(\n        \"img\",\n        {\n          src: imgSrc,\n          key: imgSrc,\n          style: { display: \"none\" },\n          onLoad: () => {\n            setIsImageLoaded(true);\n          },\n          ref: _image,\n          crossOrigin: calculatedImageSettings == null ? void 0 : calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\n      \"canvas\",\n      __spreadValues({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: setCanvasRef,\n        role: \"img\"\n      }, otherProps)\n    ), img);\n  }\n);\nQRCodeCanvas.displayName = \"QRCodeCanvas\";\nvar QRCodeSVG = React.forwardRef(\n  function QRCodeSVG2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      boostLevel,\n      title,\n      marginSize,\n      imageSettings\n    } = _a, otherProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"boostLevel\",\n      \"title\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      boostLevel,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    let cellsToDraw = cells;\n    let image = null;\n    if (imageSettings != null && calculatedImageSettings != null) {\n      if (calculatedImageSettings.excavation != null) {\n        cellsToDraw = excavateModules(\n          cells,\n          calculatedImageSettings.excavation\n        );\n      }\n      image = /* @__PURE__ */ React.createElement(\n        \"image\",\n        {\n          href: imageSettings.src,\n          height: calculatedImageSettings.h,\n          width: calculatedImageSettings.w,\n          x: calculatedImageSettings.x + margin,\n          y: calculatedImageSettings.y + margin,\n          preserveAspectRatio: \"none\",\n          opacity: calculatedImageSettings.opacity,\n          crossOrigin: calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    const fgPath = generatePath(cellsToDraw, margin);\n    return /* @__PURE__ */ React.createElement(\n      \"svg\",\n      __spreadValues({\n        height: size,\n        width: size,\n        viewBox: `0 0 ${numCells} ${numCells}`,\n        ref: forwardedRef,\n        role: \"img\"\n      }, otherProps),\n      !!title && /* @__PURE__ */ React.createElement(\"title\", null, title),\n      /* @__PURE__ */ React.createElement(\n        \"path\",\n        {\n          fill: bgColor,\n          d: `M0,0 h${numCells}v${numCells}H0z`,\n          shapeRendering: \"crispEdges\"\n        }\n      ),\n      /* @__PURE__ */ React.createElement(\"path\", { fill: fgColor, d: fgPath, shapeRendering: \"crispEdges\" }),\n      image\n    );\n  }\n);\nQRCodeSVG.displayName = \"QRCodeSVG\";\nexport {\n  QRCodeCanvas,\n  QRCodeSVG\n};\n"],"names":["createSvgIcon","_jsx","d","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","Paper","name","overridesResolver","props","styles","root","overflow","React","inProps","ref","useDefaultProps","className","raised","other","_objectWithoutProperties","ownerState","_objectSpread","classes","composeClasses","useUtilityClasses","clsx","elevation","undefined","getCardContentUtilityClass","CardContentRoot","padding","paddingBottom","component","as","qrcodegen","__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__objRest","source","exclude","target","indexOf","qrcodegen2","_QrCode","constructor","version","errorCorrectionLevel","dataCodewords","msk","this","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","data","seg","makeBytes","dataUsedBits","minVersion","arguments","length","maxVersion","boostEcl","dataCapacityBits2","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","getData","dataCapacityBits","Math","min","padByte","forEach","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","block","right","vert","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","val","len","cond","QrCode","_QrSegment","bitData","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substring","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_SIZE","DEFAULT_LEVEL","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","DEFAULT_INCLUDEMARGIN","DEFAULT_MINVERSION","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","useQRCode","_ref","level","includeMargin","marginSize","imageSettings","boostLevel","qrcode","segments","Array","isArray","accum","v","cells","numCells","calculatedImageSettings","cells2","margin2","getMarginSize","numCells2","calculatedImageSettings2","defaultSize","scale","width","height","opacity","excavate","floorX","floorY","crossOrigin","getImageSettings","SUPPORTS_PATH2D","Path2D","addPath","e","forwardedRef","_a","bgColor","fgColor","_b","style","otherProps","imgSrc","src","_canvas","_image","setCanvasRef","node","current","isImgLoaded","setIsImageLoaded","canvas","ctx","getContext","cellsToDraw","image","haveImageToRender","complete","naturalHeight","naturalWidth","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","globalAlpha","drawImage","canvasStyle","img","display","onLoad","role","displayName","QRCodeSVG","title","href","preserveAspectRatio","fgPath","viewBox","shapeRendering"],"sourceRoot":""}