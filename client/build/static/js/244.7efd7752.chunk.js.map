{"version":3,"file":"static/js/244.7efd7752.chunk.js","mappings":"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","sources":["components/ExportPage.js","../node_modules/file-saver/src/FileSaver.js"],"sourcesContent":["import React, { Suspense, useState, useEffect } from 'react';\nimport { Container, Paper, Typography, Button, Box, CircularProgress } from '@mui/material';\nimport axios from 'axios'; // Added axios import\nimport { saveAs } from 'file-saver';\n\nconst PictureAsPdfIcon = React.lazy(() => import('@mui/icons-material/PictureAsPdf'));\nconst TableViewIcon = React.lazy(() => import('@mui/icons-material/TableView'));\nconst DownloadIcon = React.lazy(() => import('@mui/icons-material/Download'));\nconst DescriptionIcon = React.lazy(() => import('@mui/icons-material/Description'));\n\nconst jsPDF = React.lazy(() => import('jspdf'));\nconst XLSX = React.lazy(() => import('xlsx'));\n\nconst ExportPage = () => {\n    const [rooms, setRooms] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        axios.get('https://rntmgmt-vishal.onrender.com/api/rooms')\n            .then(res => {\n                setRooms(res.data);\n                setLoading(false);\n            })\n            .catch(err => {\n                console.error('Error fetching rooms:', err);\n                setLoading(false);\n            });\n    }, []);\n\n    const exportToPDF = () => {\n        const doc = new jsPDF();\n        doc.setFontSize(16);\n        doc.text('Rooms List', 14, 15);\n        doc.setFontSize(12);\n        doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 25);\n\n        const tableColumn = [\"Room Number\", \"Floor Number\", \"Building Name\", \"Room Type\", \"Rent\", \"Availability\"];\n        const tableRows = rooms.map(room => [\n            room.room_number,\n            room.floor_number,\n            room.building_name,\n            room.room_type,\n            room.rent,\n            room.availability ? 'Available' : 'Occupied'\n        ]);\n\n        doc.autoTable({\n            startY: 30,\n            head: [tableColumn],\n            body: tableRows,\n            theme: 'grid',\n            styles: { fontSize: 8 },\n            headStyles: { fillColor: [41, 128, 185], textColor: 255 }\n        });\n\n        doc.save('rooms-list.pdf');\n    };\n\n    const exportToExcel = () => {\n        const worksheet = XLSX.utils.json_to_sheet(rooms.map(room => ({\n            \"Room Number\": room.room_number,\n            \"Floor Number\": room.floor_number,\n            \"Building Name\": room.building_name,\n            \"Room Type\": room.room_type,\n            \"Rent\": room.rent,\n            \"Availability\": room.availability ? 'Available' : 'Occupied'\n        })));\n\n        const workbook = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(workbook, worksheet, \"Rooms\");\n        const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n        const data = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n        saveAs(data, 'rooms-list.xlsx');\n    };\n\n    const exportToCSV = () => {\n        const worksheet = XLSX.utils.json_to_sheet(rooms.map(room => ({\n            \"Room Number\": room.room_number,\n            \"Floor Number\": room.floor_number,\n            \"Building Name\": room.building_name,\n            \"Room Type\": room.room_type,\n            \"Rent\": room.rent,\n            \"Availability\": room.availability ? 'Available' : 'Occupied'\n        })));\n\n        const csv = XLSX.utils.sheet_to_csv(worksheet);\n        const data = new Blob([csv], { type: 'text/csv;charset=utf-8' });\n        saveAs(data, 'rooms-list.csv');\n    };\n\n    const exportToText = () => {\n        let content = 'Rooms List\\n\\n';\n        content += `Generated on: ${new Date().toLocaleDateString()}\\n\\n`;\n\n        rooms.forEach((room, index) => {\n            content += `${index + 1}. ROOM DETAILS\\n`;\n            content += `Room Number: ${room.room_number}\\n`;\n            content += `Floor Number: ${room.floor_number}\\n`;\n            content += `Building Name: ${room.building_name}\\n`;\n            content += `Room Type: ${room.room_type}\\n`;\n            content += `Rent: ${room.rent}\\n`;\n            content += `Availability: ${room.availability ? 'Available' : 'Occupied'}\\n`;\n            content += '\\n----------------------------\\n\\n';\n        });\n\n        const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });\n        saveAs(blob, 'rooms-list.txt');\n    };\n\n    if (loading) {\n        return (\n            <Container sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\n                <CircularProgress />\n            </Container>\n        );\n    }\n\n    return (\n        <Suspense fallback={<CircularProgress />}>\n            <Container maxWidth=\"md\" sx={{ mt: 4, mb: 4 }}>\n                <Paper sx={{ p: 4 }}>\n                    <Typography variant='h4' gutterBottom align='center' color='primary'>\n                        Export Rooms\n                    </Typography>\n\n                    <Typography variant=\"body1\" sx={{ mb: 4 }} align=\"center\" color=\"text.secondary\">\n                        Export your room collection in different formats\n                    </Typography>\n\n                    <Box sx={{ \n                        display: 'grid', \n                        gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' }, \n                        gap: 3, \n                        mt: 4 \n                    }}>\n                        <Button\n                            aria-label=\"Export as PDF\"\n                            variant=\"contained\"\n                            size=\"large\"\n                            startIcon={<PictureAsPdfIcon />}\n                            onClick={exportToPDF}\n                            sx={{ p: 2 }}\n                        >\n                            Export as PDF\n                        </Button>\n                        <Button\n                            aria-label=\"Export as CSV\"\n                            variant=\"contained\"\n                            size=\"large\"\n                            startIcon={<TableViewIcon />}\n                            onClick={exportToCSV}\n                            sx={{ p: 2 }}\n                        >\n                            Export as CSV\n                        </Button>\n                        <Button\n                            aria-label=\"Export as Excel\"\n                            variant=\"contained\"\n                            size=\"large\"\n                            startIcon={<DownloadIcon />}\n                            onClick={exportToExcel}\n                            sx={{ p: 2 }}\n                        >\n                            Export as Excel\n                        </Button>\n                        <Button\n                            aria-label=\"Export as Text\"\n                            variant=\"contained\"\n                            size=\"large\"\n                            startIcon={<DescriptionIcon />}\n                            onClick={exportToText}\n                            sx={{ p: 2 }}\n                        >\n                            Export as Text\n                        </Button>\n                    </Box>\n                    <Typography variant=\"body2\" sx={{ mt: 4 }} align=\"center\" color=\"text.secondary\">\n                        Total Rooms: {rooms.length}\n                    </Typography>\n                </Paper>\n            </Container>\n        </Suspense>\n    );\n};\n\nexport default ExportPage;\n","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n"],"names":["PictureAsPdfIcon","React","TableViewIcon","DownloadIcon","DescriptionIcon","jsPDF","XLSX","ExportPage","rooms","setRooms","useState","loading","setLoading","useEffect","axios","get","then","res","data","catch","err","console","error","_jsx","Container","sx","display","justifyContent","mt","children","CircularProgress","Suspense","fallback","maxWidth","mb","_jsxs","Paper","p","Typography","variant","gutterBottom","align","color","Box","gridTemplateColumns","xs","sm","gap","Button","size","startIcon","onClick","exportToPDF","doc","setFontSize","text","concat","Date","toLocaleDateString","tableRows","map","room","room_number","floor_number","building_name","room_type","rent","availability","autoTable","startY","head","body","theme","styles","fontSize","headStyles","fillColor","textColor","save","exportToCSV","worksheet","utils","json_to_sheet","csv","sheet_to_csv","Blob","type","saveAs","exportToExcel","workbook","book_new","book_append_sheet","excelBuffer","write","bookType","exportToText","content","forEach","index","blob","length","b","a","autoBom","warn","test","c","d","XMLHttpRequest","open","responseType","onload","g","response","onerror","send","status","e","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","f","self","global","navigator","userAgent","HTMLAnchorElement","prototype","h","i","URL","webkitURL","j","createElement","name","download","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","innerText","HTMLElement","safari","FileReader","k","onloadend","result","replace","readAsDataURL","l","m","module","exports"],"sourceRoot":""}