{"version":3,"file":"static/js/564.5b6357a6.chunk.js","mappings":"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","sources":["components/QRCodePage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { QRCodeSVG } from 'qrcode.react';\nimport {\n  Container,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  CircularProgress,\n  Box,\n} from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport axios from 'axios';\n\nconst QRCodePage = () => {\n  const [rooms, setRooms] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const frontendBaseUrl = `${window.location.origin}/rooms`;\n\n  // Fetching data with optimization (memoization to prevent unnecessary requests)\n  const fetchRooms = useCallback(async () => {\n    try {\n      const res = await axios.get('https://rntmgmt-vishal.onrender.com/api/rooms');\n      setRooms(res.data);\n    } catch (err) {\n      console.error('Error fetching rooms:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchRooms();\n  }, [fetchRooms]);\n\n  const downloadQR = useCallback((roomId, buildingName) => {\n    const canvas = document.createElement('canvas');\n    const svg = document.getElementById(`qr-${roomId}`);\n    const serializer = new XMLSerializer();\n    const source = serializer.serializeToString(svg);\n\n    const img = new Image();\n    img.src = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(source);\n\n    img.onload = () => {\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n\n      const a = document.createElement('a');\n      a.download = `QR-${buildingName.replace(/\\s+/g, '-')}.png`;\n      a.href = canvas.toDataURL('image/png');\n      a.click();\n    };\n  }, []);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom align=\"center\" color=\"primary\">\n        Room QR Codes\n      </Typography>\n      <Typography variant=\"body1\" gutterBottom align=\"center\" sx={{ mb: 4 }}>\n        Scan QR codes to quickly access room details\n      </Typography>\n\n      <Grid container spacing={3}>\n        {rooms.map((room) => (\n          <Grid item xs={12} sm={6} md={4} key={room._id}>\n            <Card\n              sx={{\n                height: '100%',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                p: 2,\n              }}\n              role=\"region\" // For accessibility (better for screen readers)\n              aria-labelledby={`room-${room._id}`}\n            >\n              <CardContent\n                sx={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  width: '100%',\n                }}\n              >\n                <QRCodeSVG\n                  id={`qr-${room._id}`}\n                  value={`${frontendBaseUrl}/${room._id}`} // Point to the frontend route\n                  size={200}\n                  level=\"H\"\n                  includeMargin\n                  aria-label={`QR code for Room ${room.room_number}`} // For accessibility\n                />\n                <Typography\n                  variant=\"h6\"\n                  component=\"div\"\n                  align=\"center\"\n                  sx={{ mt: 2, mb: 1 }}\n                  id={`room-${room._id}`}\n                >\n                  Room {room.room_number}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  align=\"center\"\n                  aria-label={`Floor: ${room.floor_number}`}\n                >\n                  Floor: {room.floor_number}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  align=\"center\"\n                  sx={{ mb: 2 }}\n                  aria-label={`Building: ${room.building_name}`}\n                >\n                  Building: {room.building_name}\n                </Typography>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<DownloadIcon />}\n                  onClick={() => downloadQR(room._id, room.building_name)}\n                  size=\"small\"\n                  aria-label={`Download QR for Room ${room.room_number}`}\n                >\n                  Download QR\n                </Button>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default QRCodePage;\n"],"names":["QRCodePage","rooms","setRooms","useState","loading","setLoading","frontendBaseUrl","concat","window","location","origin","fetchRooms","useCallback","async","res","axios","get","data","err","console","error","useEffect","downloadQR","roomId","buildingName","canvas","document","createElement","svg","getElementById","source","XMLSerializer","serializeToString","img","Image","src","encodeURIComponent","onload","width","height","getContext","drawImage","a","download","replace","href","toDataURL","click","_jsx","Box","display","justifyContent","alignItems","minHeight","children","CircularProgress","_jsxs","Container","maxWidth","sx","py","Typography","variant","component","gutterBottom","align","color","mb","Grid","container","spacing","map","room","item","xs","sm","md","Card","flexDirection","p","role","_id","CardContent","QRCodeSVG","id","value","size","level","includeMargin","room_number","mt","floor_number","building_name","Button","startIcon","DownloadIcon","onClick"],"sourceRoot":""}